#!/bin/bash
clang_path="${HOME}/proton-clang/bin/clang"
gcc_path="${HOME}/proton-clang/bin/aarch64-linux-gnu-"
gcc_32_path="${HOME}/proton-clang/bin/arm-linux-gnueabi-"

source=`pwd`
START=$(date +"%s")

date="`date +"%m%d%H%M"`"

args="-j$(nproc --all) O=out \
	ARCH=arm64 "

print (){
case ${2} in
	"red")
	echo -e "\033[31m $1 \033[0m";;

	"blue")
	echo -e "\033[34m $1 \033[0m";;

	"yellow")
	echo -e "\033[33m $1 \033[0m";;

	"purple")
	echo -e "\033[35m $1 \033[0m";;

	"sky")
	echo -e "\033[36m $1 \033[0m";;

	"green")
	echo -e "\033[32m $1 \033[0m";;

	*)
	echo $1
	;;
	esac
}

print "You are building a snapshot version:$date" yellow

args+="LOCALVERSION=-$date "

args+="CC=$clang_path \
	CLANG_TRIPLE=aarch64-linux-gnu- \
	CROSS_COMPILE=$gcc_path \
	AR=${HOME}/proton-clang/bin/llvm-ar \
	NM=${HOME}/proton-clang/bin/llvm-nm \
	OBJCOPY=${HOME}/proton-clang/bin/llvm-objcopy \
	OBJDUMP=${HOME}/proton-clang/bin/llvm-objdump \
	STRIP=${HOME}/proton-clang/bin/llvm-strip "

args+="CROSS_COMPILE_ARM32=$gcc_32_path "

clean(){
	make mrproper
	make $args mrproper
}

build_z2_plus(){
	export KBUILD_BUILD_USER="z2_plus"
	export KBUILD_BUILD_HOST="LibXZR"
	print "Building Kernel for z2_plus..." blue
	make $args z2_plus_defconfig&&make $args
	if [ $? -ne 0 ]; then
    terminate "Error while building for z2_plus!"
    fi
	mkzip "z2_plus-${1}"
}

build_z2_plus_oc(){
	export KBUILD_BUILD_USER="z2_plus"
	export KBUILD_BUILD_HOST="LibXZR"
	print "Building panel-OC ${1}Hz Kernel for z2_plus..." blue
	sed -i "s/qcom,mdss-dsi-panel-framerate = <60>/qcom,mdss-dsi-panel-framerate = <${1}>/g" arch/arm64/boot/dts/qcom/zuk/dsi-panel-tianma-1080p-video.dtsi
	make $args z2_plus_defconfig&&make $args
	if [ $? -ne 0 ]; then
    terminate "Error while building panel-OC ${1}Hz kernel for z2_plus!"
    fi
	mkzip "z2_plus-${2}-${1}Hz"
	sed -i "s/qcom,mdss-dsi-panel-framerate = <${1}>/qcom,mdss-dsi-panel-framerate = <60>/g" arch/arm64/boot/dts/qcom/zuk/dsi-panel-tianma-1080p-video.dtsi
}

build_z2_row(){
	export KBUILD_BUILD_USER="z2_row"
	export KBUILD_BUILD_HOST="LibXZR"
	print "Building Kernel for z2_row..." blue
	make $args z2_row_defconfig&&make $args
	if [ $? -ne 0 ]; then
    terminate "Error while building for z2_row!"
    fi
	mkzip "z2_row-${1}"
}

mkzip (){
	zipname="(${1})Nameless-Kernel[4.4-EAS]-$date.zip"
	cp -f out/arch/arm64/boot/Image.gz-dtb ~/AnyKernel2
	cd ~/AnyKernel2
	git checkout z2/eas
	zip -r "$zipname" *
	mv -f "$zipname" ${HOME}
	cd ${HOME}
	tg_upload "$zipname"
	cd $source
	print "All done.Find it at ${HOME}/$zipname" green
}

tg_upload(){
    curl -s https://api.telegram.org/bot"${BOTTOKEN}"/sendDocument -F document=@"${1}" -F chat_id="${CHATID}"
}

tg_notify(){
    curl -s https://api.telegram.org/bot"${BOTTOKEN}"/sendMessage -d parse_mode="Markdown" -d text="${1}" -d chat_id="${CHATID}"
}

terminate(){
  tg_notify "${1}"
  exit 1
}

ftp_upload(){
ftp -v -n ${ftp_server}<<EOF
    user ${ftp_username} ${ftp_pwd}
    passive
    binary
    lcd ${HOME}
    mkdir ${date}
    cd ${date}
    prompt
    mput *Nameless*.zip
    bye
EOF
    echo "Ftp uploading done!"
}

sftp_upload(){
cd ${HOME}
lftp <<EOF
    set sftp:auto-confirm yes
    open sftp://${sftp_server}
    user ${sftp_username} ${sftp_pwd}
    cd upload
    mkdir zuk
    cd zuk
    mkdir Nameless-Kernel
    cd Nameless-Kernel
    mkdir ${date}
    cd ${date}
    mput *Nameless*.zip
    bye
EOF

    echo "Sftp uploading done!"
}

	clean
	for p in patches/*
	do
	git apply ${p}
	build_z2_plus ${p##*/}
	
	for i in 68 72 75
	do
	build_z2_plus_oc ${i} ${p##*/}
	done
	git reset --hard
	done
	
	clean
	for p in patches/*
	do
	git apply ${p}
	build_z2_row ${p##*/}
	git reset --hard
	done

	END=$(date +"%s")
	KDURATION=`expr $END - $START`
	tg_notify "Build finished for #${DRONE_BUILD_NUMBER} ( ${date} ).  ( Duration `expr $KDURATION / 60` m `expr $KDURATION % 60` s )"
	ftp_upload
	sftp_upload
